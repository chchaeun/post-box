{"version":3,"sources":["routes/Home.js","fBase.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Tweet.js","components/TweetFactory.js","routes/PostBox.js","components/AppRouter.js","components/App.js","index.js"],"names":["Home","userObj","history","useHistory","useState","friendId","setFriendId","id","type","onClick","push","uid","size","color","style","onSubmit","event","preventDefault","className","for","name","value","onChange","target","placeholder","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","a","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","required","prev","Auth","onSocialLogin","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","updateProfile","document","location","origin","getElementById","select","execCommand","alert","signOut","Navigation","href","Tweet","tweetObj","isOwner","domain","window","pathname","split","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","confirm","doc","delete","refFromURL","attachmentUrl","e","update","toggleEditing","width","src","height","TweetFactory","pageOwner","tweet","setTweet","attachment","setAttachment","fileRef","ref","child","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","rows","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","PostBox","tweets","setTweets","setPageOwner","useEffect","onSnapshot","snapshot","tweetArr","docs","map","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.18a4fc98.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport 'styles/Home.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {GoMail} from 'react-icons/go'\r\nimport {BsPencil} from 'react-icons/bs'\r\nconst Home = ({userObj})=>{\r\n\r\n    const history = useHistory();\r\n\r\n    const [friendId, setFriendId] = useState();\r\n\r\n    const onChange = (event)=>{\r\n        const {target: {value}} = event;\r\n        setFriendId(value);\r\n    }\r\n\r\n    const onSubmit= (event)=>{\r\n        event.preventDefault();\r\n        history.push(`/${friendId}`);\r\n    }\r\n\r\n    const onMyPost = ()=>{\r\n        history.push(`/${userObj.uid}`);\r\n    }\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            <button id=\"my-box\" type=\"button\" onClick={onMyPost}>\r\n            <GoMail size=\"24\" color=\"rgb(90, 90, 90)\"/>\r\n            <p style={{\"padding\":\"10px\"}}>내 우편함 가기</p></button>\r\n\r\n            <form onSubmit={onSubmit} id=\"friend-form\" className=\"form-group\">\r\n                <BsPencil size=\"24\" color=\"rgb(90, 90, 90)\" style={{\"margin-left\":\"59px\"}}/><br/>\r\n                <label for=\"friend-box\">친구의 우편함 가기</label>\r\n                <input name=\"friend-box\" \r\n                className=\"form-control\" \r\n                type=\"text\" \r\n                value={friendId} \r\n                onChange={onChange}\r\n                placeholder=\"코드 입력\"/>\r\n                <input id=\"friend-submit\" type=\"submit\" value=\"방문하기\" \r\n                className=\"btn btn-outline-secondary\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default Home;","import firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { authService } from 'fBase';\r\nimport react, {useState} from 'react'\r\n\r\nimport 'styles/Auth.css'\r\n\r\nconst AuthForm = () =>{\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    \r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name===\"email\"){\r\n            setEmail(value);\r\n        }else if(name===\"password\"){\r\n            setPassword(value)\r\n        }\r\n    };\r\n\r\n    const onSubmit = async(event) =>{\r\n        event.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }else{\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            \r\n        console.log(data);\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    \r\n    \r\n    const toggleAccount = ()=>{\r\n        setNewAccount(prev => !prev);\r\n    }\r\n    \r\n    return(<>\r\n    <form onSubmit={onSubmit} className=\"form-group\">\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    placeholder=\"이메일\"\r\n                    value={email}\r\n                    onChange={onChange}\r\n                    required\r\n                    className=\"form-control login-input\"\r\n                    \r\n                    />\r\n                <input \r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"비밀번호\"\r\n                    value={password}\r\n                    onChange={onChange}\r\n                    required\r\n                    className=\"form-control password-input\"\r\n                    />\r\n                <input id=\"submit-btn\" className=\"btn btn-outline-secondary\" type=\"submit\" value={newAccount ? \"회원가입\" : \"로그인\"}/>\r\n            </form>\r\n            <span className=\"toggle\" onClick={toggleAccount}>\r\n                {newAccount ? \"로그인 하기\" : \"가입 하기\"}\r\n            </span>\r\n            {error}\r\n\r\n    </>)\r\n}\r\n\r\nexport default AuthForm;","import React, {useState} from 'react';\r\nimport {authService, firebaseInstance} from 'fBase';\r\nimport AuthForm from 'components/AuthForm';\r\nimport {AiFillGoogleCircle, AiFillGithub} from 'react-icons/ai'\r\nimport 'styles/Auth.css'\r\n\r\nconst Auth = () =>{\r\n    const onSocialLogin = async (event) =>{\r\n        const {target: {name}} = event;\r\n        \r\n        let provider;\r\n        if(name===\"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name === \"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h2>Post-Box</h2>\r\n            <AuthForm/>\r\n            <div className=\"social\">\r\n                <button className=\"social-one btn btn-outline-secondary\" onClick={onSocialLogin} name=\"google\">\r\n                    <AiFillGoogleCircle size=\"20\" style={{\"marginBottom\":\"2px\"}}/> Google로 로그인</button>\r\n                <button className=\"social-two btn btn-outline-secondary\" onClick={onSocialLogin} name=\"github\">\r\n                    <AiFillGithub size=\"20\" style={{\"marginBottom\":\"2px\"}}/> Github로 로그인</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;","import React, {useEffect, useState} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { authService, dbService } from \"fBase\";\r\n\r\nimport 'styles/Profile.css'\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n      authService.signOut();\r\n      history.push(\"/\");\r\n    };\r\n\r\n    const onChange = (event)=>{\r\n      const {target: {value}} = event;\r\n      setNewDisplayName(value);\r\n\r\n    }\r\n\r\n    const onSubmit = async(event)=>{\r\n      event.preventDefault();\r\n      if(userObj.displayName !== newDisplayName){\r\n        await userObj.updateProfile({\r\n          displayName: newDisplayName\r\n        })\r\n      }\r\n      refreshUser();\r\n    }\r\n    // const getMyTweet = async()=>{\r\n    //   const tweets = await dbService\r\n    //     .collection(\"tweets\")\r\n    //     .where(\"creatorId\", \"==\", userObj.uid)\r\n    //     .get();\r\n    //   console.log(tweets.docs.map(doc=>doc.data()));\r\n    // }\r\n    // useEffect(()=>{\r\n    //   console.log(userObj.uid)\r\n    //   getMyTweet();\r\n    // }, [])\r\n\r\n    \r\n    const onShareClick = ()=>{\r\n      const copyText = document.getElementById(\"copy\");\r\n      copyText.select();\r\n      document.execCommand(\"Copy\");\r\n      alert(\"주소가 복사되었습니다.\")\r\n  }\r\n    return (\r\n      <div>\r\n        <form className=\"form-group change-form\" onSubmit={onSubmit}>\r\n          <span>이름 바꾸기</span>\r\n          <input className=\"form-control\"  id=\"change-name\" type=\"text\" placeholder=\"이름\" value={newDisplayName} onChange={onChange}/>\r\n          <input className=\"btn btn-outline-secondary\" type=\"submit\"/>\r\n        </form>\r\n        <span className=\"share\">내 우편함 공유하기</span>\r\n        <input className=\"form-control\" style={{\"display\":\"block\"}} id=\"copy\" value={`${document.location.origin}/${userObj.uid}`}/>\r\n        <button className=\"btn btn-outline-secondary\" id=\"copy-btn\" onClick={onShareClick}>주소 복사</button>\r\n\r\n        <button id=\"logout\" className=\"btn btn-outline-secondary\" onClick={onLogOutClick}>로그아웃</button>\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Profile;","import {FiInbox} from \"react-icons/fi\";\r\nimport {AiOutlineUser} from \"react-icons/ai\"\r\nimport 'styles/Home.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst Navigation = ({userObj}) =>{\r\n\r\n    return (\r\n        <>\r\n            <h2>Post-Box</h2>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"/\"><FiInbox id=\"icon\"/>Home</a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"/profile\"><AiOutlineUser id=\"icon\"/>{userObj.displayName}</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Navigation;","import { dbService, storageService } from \"fBase\";\r\nimport React, {useState} from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'styles/PostBox.css'\r\nconst Tweet = ({tweetObj, isOwner}) =>{\r\n\r\n    const domain = window.location.pathname.split('/')[1];\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n    const onDeleteClick = async() =>{\r\n        const ok = window.confirm(\"정말 지우시겠습니까?\");\r\n        if(ok){\r\n            await dbService.doc(`${domain}/${tweetObj.id}`).delete();\r\n            await storageService.refFromURL(`${tweetObj.attachmentUrl}`).delete();\r\n        }\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        await dbService.doc(`${domain}/${tweetObj.id}`).update({\r\n            text: newTweet\r\n        })\r\n        setEditing(false);\r\n    }\r\n\r\n    const onChange = (e) =>{\r\n        const {target: {value}} = e;\r\n        setNewTweet(value);\r\n    }\r\n\r\n    const toggleEditing = () => setEditing(prev=>!prev);\r\n    return(\r\n        <div id=\"post-obj\">\r\n        { editing ? (\r\n            <>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"text\"\r\n                onChange={onChange}\r\n                value={newTweet}\r\n                required\r\n                id=\"edit-form\"\r\n                />\r\n                <input className=\"btn buttons\" type=\"submit\"\r\n                value=\"이렇게 보내기\"\r\n                />\r\n            </form>\r\n            <button className=\"btn buttons\" onClick={toggleEditing} >취소하고 그대로</button>\r\n            </>\r\n            ):(\r\n            <div>\r\n                <div width=\"400px\" style={{\"word-break\":\"break-all\"}}>{tweetObj.text}</div>\r\n                {tweetObj.attachmentUrl && \r\n                <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\"/>}\r\n                {isOwner && \r\n                <>\r\n                    <button className=\"btn buttons\" \r\n                    onClick={toggleEditing}>고치기</button>\r\n                    <button className=\"btn buttons\"\r\n                    onClick={onDeleteClick}>지우기</button>\r\n                </>}\r\n            </div>\r\n            )\r\n                \r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tweet;","import { dbService, storageService } from \"fBase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport react, {useState, useEffect} from 'react'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'styles/PostBox.css'\r\n\r\nimport { BiImageAdd } from 'react-icons/bi'\r\n\r\nconst TweetFactory = ({userObj, pageOwner}) =>{\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n    const onChange = (e) =>{\r\n        const {target: {value}} = e;\r\n        setTweet(value);\r\n    }\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n\r\n        let attachmentUrl = \"\";\r\n        if(attachment){\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await fileRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        \r\n        const tweetObj = {\r\n            text: tweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        }\r\n        await dbService.collection(`${pageOwner}`).add(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n\r\n    const onFileChange = (event) =>{\r\n        const {\r\n            target: {files}\r\n        } = event;\r\n        const theFile = files[0];\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishedEvent) =>{\r\n            const {currentTarget: {result}} = finishedEvent; \r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n\r\n    }\r\n    const onAttachmentClear = () =>{\r\n        setAttachment(null);\r\n    }\r\n\r\n    return (\r\n    <form onSubmit={onSubmit} \r\n    className=\"form-group\"\r\n    id=\"post-form\"\r\n    >\r\n        <textarea\r\n        style={{\"resize\":\"none\"}}\r\n        rows=\"2\"\r\n        onChange={onChange} \r\n        value={tweet} \r\n        type=\"text\" \r\n        placeholder=\"편지 쓰기\" \r\n        maxLength={150}\r\n        className=\"form-control\" \r\n        id=\"input-post\"\r\n        />\r\n        <label for=\"input-image\"><BiImageAdd size=\"24\"/></label>\r\n        <input \r\n        id=\"input-image\" \r\n        value=\"\" \r\n        type=\"file\" \r\n        accept=\"image/*\" \r\n        onChange={onFileChange} \r\n        />\r\n        {attachment && \r\n        <div id=\"attach\">\r\n            <img src={attachment} width=\"50px\" height=\"50px\"\r\n            style={{\"margin-right\":\"5px\"}}/>\r\n            <button onClick={onAttachmentClear}\r\n            style={{\"border\":\"none\", \"backgroundColor\":\"white\", \"color\":\"gray\"}}>\r\n                이미지 삭제</button>\r\n        </div>}\r\n\r\n        <input id=\"post-submit\" type=\"submit\" value=\"보내기\"\r\n        className=\"btn btn-outline-secondary\"\r\n        />\r\n    </form>);\r\n}\r\n\r\nexport default TweetFactory;","import React, {useState, useEffect} from 'react'\r\nimport { dbService, storageService } from 'fBase';\r\nimport Tweet from 'components/Tweet';\r\nimport TweetFactory from 'components/TweetFactory';\r\nimport {useLocation} from 'react-router-dom'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'styles/PostBox.css'\r\n\r\nconst PostBox = ({userObj}) =>{\r\n\r\n    const [tweets, setTweets] = useState([]);\r\n    const [pageOwner, setPageOwner] = useState(window.location.pathname.split('/')[1]);\r\n\r\n    useEffect(() => {\r\n        setPageOwner(window.location.pathname.split('/')[1]);\r\n    }, [window.location.pathname])\r\n\r\n    useEffect(()=>{\r\n        dbService.collection(`${pageOwner}`).onSnapshot(snapshot=>{\r\n            const tweetArr = snapshot.docs.map(doc => ({\r\n                ...doc.data(),\r\n                id: doc.id,\r\n            }));\r\n            setTweets(tweetArr);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TweetFactory userObj={userObj} pageOwner={pageOwner}/>\r\n            <div id=\"posts\">\r\n            {tweets.map(tweet=>(\r\n                <Tweet key={tweet.id} \r\n                tweetObj={tweet} \r\n                isOwner={userObj.uid === tweet.creatorId}/>\r\n            ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostBox;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Home from 'routes/Home';\r\nimport Auth from 'routes/Auth';\r\nimport Profile from 'routes/Profile';\r\nimport Navigation from 'components/Navigation';\r\nimport PostBox from 'routes/PostBox';\r\n\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) =>{\r\n    return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj}/>}\r\n      <Switch>\r\n        <Route exact path=\"/\">{isLoggedIn ? <Home userObj={userObj}/>:<Auth/>}</Route>\r\n        <Route exact path=\"/profile\">{isLoggedIn ? <Profile refreshUser={refreshUser} userObj={userObj}/>:<Auth/>}</Route>\r\n        <Route exact path=\"/:id\">{isLoggedIn ? <PostBox userObj={userObj}/>:<Auth/>}</Route>\r\n      </Switch>\r\n    </Router>\r\n    );\r\n}\r\n\r\nexport default AppRouter;","import React, {useState, useEffect} from \"react\";\nimport AppRouter from 'components/AppRouter';\nimport {authService} from 'fBase';\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(()=>{\n    authService.onAuthStateChanged(user =>{\n      if(user){\n        setUserObj({\n          uid: user.uid,\n          displayName:user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }else{\n        setUserObj(null);\n      }\n      setInit(true);\n    })\n  }, []);\n\n  const refreshUser = ()=>{\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName:user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    })\n  }\n\n  \n  return (\n    <>\n      {init? <AppRouter refreshUser={refreshUser} isLoggedIn={Boolean(userObj)} userObj={userObj}/>:\"Loading...\"}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\n\nReactDOM.render((\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>),\n  document.getElementById('root')\n);"],"sourceRoot":""}